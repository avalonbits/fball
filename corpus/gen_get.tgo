package corpus

import (
	"context"
	"encoding/json"
	"time"

	"git.cana.pw/avalonbits/fball"
	"git.cana.pw/avalonbits/fball/db"
	"github.com/cheekybits/genny/generic"
)

type JSONResponse generic.Type

func (c Corpus) getJSONResponse(
	ctx context.Context, endpoint string, max int, rng db.Range, policy refreshPolicy,
	params db.URLQueryStringer) ([]JSONResponse, error) {
	// Query the countries from the database.
	resp := []JSONResponse{}
	err := c.handle.Query(ctx, endpoint, params, max, rng, func(data []byte) error {
		cr := JSONResponse{}
		if err := json.Unmarshal(data, &cr); err != nil {
			return err
		}
		resp = append(resp, cr)
		return nil
	})

	if err == nil && len(resp) != 0 && rp_OneDay.Valid(time.Now(), resp[0].When()) {
		return resp, nil
	} else if err != nil {
		c.logger.Printf("WARNING - query error for countries: %v", err)
	}

	// Either the data is not available or it has expired.
	crQ := JSONResponse{}
	if err := c.fballc.Get(ctx, fball.EP_Countries, &crQ, params); err != nil {
		// We tolerate stale data if the api call fails. We still log it.
		if len(resp) != 0 {
			c.logger.Printf("WARNING - unable to query countries: %v.", err)
			c.logger.Printf("WARNING - returning stale data for countries.")
			return resp, nil
		} else {
			return nil, err
		}
	}

	if err := c.handle.Insert(ctx, endpoint, crQ, params); err != nil {
		c.logger.Printf("ERROR - unable to write country to cache: %v", err)
	}

	return []JSONResponse{crQ}, nil
}
