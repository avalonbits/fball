package fball

import (
	"context"
	"encoding/json"
	"time"

	"github.com/cheekybits/genny/generic"
)

type JSONResponse generic.Type

func (c Corpus) getJSONResponse(
	ctx context.Context, endpoint string, max int, rng tRange, policy refreshPolicy,
	params urlQueryStringer) ([]JSONResponse, error) {
	// Query the countries from the database.
	resp := []JSONResponse{}

    q1 := time.Now()
	err := c.cache.Query(ctx, endpoint, params, max, rng, func(data []byte) error {
		cr := JSONResponse{}
		if err := json.Unmarshal(data, &cr); err != nil {
			return err
		}
		resp = append(resp, cr)
		return nil
	})
    q2 := time.Now()
    c.logger.Printf("INFO - %q query time: %dms", endpoint, q2.Sub(q1)/time.Millisecond)

	if err == nil && len(resp) != 0 && policy.Valid(time.Now(), resp[0].When()) {
		return resp, nil
	} else if err != nil {
		c.logger.Printf("WARNING - query error for countries: %v", err)
	}

	// Either the data is not available or it has expired.
	rQ := JSONResponse{}

    s1 := time.Now()
    err = c.fballc.Get(ctx, endpoint, &rQ, params)
    s2 := time.Now()
    c.logger.Printf("INFO - %q api call time: %dms", endpoint, s2.Sub(s1)/time.Millisecond)

    if err != nil {
		// We tolerate stale data if the api call fails. We still log it.
		if len(resp) != 0 {
			c.logger.Printf("WARNING - unable to query countries: %v.", err)
			c.logger.Printf("WARNING - returning stale data for countries.")
			return resp, nil
		} else {
			return nil, err
		}
	}

    i1 := time.Now()
	err = c.cache.Insert(ctx, endpoint, &rQ, params)
    i2 := time.Now()
    c.logger.Printf("INFO - %q insert time: %dms", endpoint, i2.Sub(i1)/time.Millisecond)

    if err != nil {
		c.logger.Printf("ERROR - unable to write country to cache: %v", err)
	}

	return []JSONResponse{rQ}, nil
}
